section .data
    num dq 1                  ; num will store the numbers from 1 to 99
    primeMsg db " is prime", 10
    primeMsg_len equ $-primeMsg
    notPrimeMsg db " is not prime", 10
    notPrimeMsg_len equ $-notPrimeMsg
    digits db "0123456789"    
	
section .comment
db "this code prints the numbers from 1 to 99 and prints if it's prime or not. The code only uses 4 registers rxa,rxb,rxc,rxd."	

section .text
    global _start

_start:

mainLoop:
    mov rax, [num]            ;move num into rax(num=rax)
    cmp rax, 100              ; Compare rax to 100 
    jge main_exit             

    
    mov rax, [num]    
    call printInt

    ; Check if the current number is prime
    mov rax, [num]
    call isPrime              ; Result in rax: 1 = prime, 0 = not prime
    cmp rax, 0
    je mainLoopNotPrime       ; If not prime, jump to not prime case

    ; Prime case: Print " is prime."
    mov rax, 4         
    mov rbx, 1
    mov rcx, primeMsg
    mov rdx, primeMsg_len
    int 0x80
    jmp mainLoopU

mainLoopNotPrime:
    ; Not prime case: Print " is not prime."
    mov rax, 4
    mov rbx, 1
    mov rcx, notPrimeMsg
    mov rdx, notPrimeMsg_len
    int 0x80

mainLoopU:
    ; Increment num and continue loop
    inc qword [num]
    jmp mainLoop

main_exit:
    mov rax, 1                ; Syscall: exit
    xor rbx, rbx              ; Exit status 0
    int 0x80

; Subroutine: Check if the number in rax is prime
isPrime:
    push rbx
    push rcx

    mov rbx, 0                ; Divisor count
    mov rcx, 2                ; Start divisor from 2

isPrimeLoop:
    mov rax, rcx
    mul rcx                   ; rax = rcx^2
    cmp rax, [num]            ; If rcx^2 > num, break loop
    jg isPrimeLoopDone

    mov rax, [num]
    xor rdx, rdx              ; Clear rdx
    div rcx                   ; rax = num / rcx, rdx = num % rcx
    cmp rdx, 0
    jne isPrimeLoopUpdate
    inc rbx                   ; Increment divisor count if divisible
    cmp rbx, 2                ; If divisor count > 2, not prime
    jg not_prime

isPrimeLoopUpdate:
    inc rcx                   ; Increment divisor
    jmp isPrimeLoop

isPrimeLoopDone:
    cmp rbx, 2                ; Exactly 2 divisors (1 and itself)
    je prime
not_prime:
    xor rax, rax              ; Return 0 (not prime)
    jmp isPrimeDone

prime:
    mov rax, 1                ; Return 1 (prime)

isPrimeDone:
    pop rcx
    pop rbx
    ret

; Subroutine: Print an integer in rax
printInt:
    push rax
    push rbx
    push rcx
    push rdx

    xor rcx, rcx              ; Digit count = 0
    mov rbx, 10               ; Base 10
printIntL1:
    xor rdx, rdx              ; Clear rdx
    div rbx                   ; rdx = remainder, rax = quotient
    push rdx                  ; Save digit
    inc rcx                   ; Increment digit count
    cmp rax, 0
    jne printIntL1

printIntL2:
    pop rax                   ; Get the next digit
    push rcx                  ; Save digit count
    mov rcx, digits           ; Address of the digits array
    add rcx, rax              ; Get ASCII value of digit
    mov rdx, 1                ; Print 1 character
    mov rbx, 1                ; File descriptor (stdout)
    mov rax, 4                ; Syscall: write
    int 0x80
    pop rcx                   ; Restore digit count
    loop printIntL2           ; Repeat until all digits are printed

    pop rdx
    pop rcx
    pop rbx
    pop rax
    ret
