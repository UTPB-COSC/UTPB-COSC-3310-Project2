section .data
newline db 0x0a, 0x00
nl_len equ $ - newline
msg_prime db " is prime.",0x0a
msgprime_len equ $- msg_prime
msg_notprime db " is not prime.",0x0a
msgnot_len equ $-msg_notprime
nums db '0123456789'
num0 dq 1
num1 dq 1
num2 dq 1
count dq 2
iter dq 100

section .text
global _start

_start:

loop_head:
    mov rax, QWORD [num0]  ; Load the number to check if it's prime
    cmp rax, QWORD[iter]
    jge loop_exit
    
    
    call prime_check                  ; Call the prime check subroutine

    ; Print the result:
    cmp rax, 1                        ; If the number is prime (rax = 1)
    je print_prime
    jmp print_not_prime

print_prime:
    call print_digit                   ; Print the number
    mov rdx, msgprime_len              ; " is prime."
    mov rcx, msg_prime
    mov rbx, 1
    mov rax, 4
    int 0x80
    ;jmp loop_tail

print_not_prime:
    call print_digit                   ; Print the number
    mov rdx, msgnot_len               ; " is not prime."
    mov rcx, msg_notprime
    mov rbx, 1
    mov rax, 4
    int 0x80
    ;jmp loop_tail
    
print_digit:
    mov rdx, 1            ; 1 byte length to print
    mov rcx, nums         ;pointer
    add rcx, QWORD[num0]        ; Move the digit to rcx for printing
    mov rbx, 1                      ; File descriptor for stdout
    mov rax, 4                      ; sys_write system call
    int 0x80  ; Call the system
    
        mov rdx, nl_len
        mov rcx, newline
        mov rbx, 1
        mov rax, 4
        int 0x80
    
    
    
    loop_printhead:
        mov rcx, QWORD [iter] ;move value iter to rax
        cmp QWORD[count], rcx ;cmp 2 value of rcx 100
        jge loop_exit
        
        
    loop_printbody:
          mov rax, QWORD[num0]
          mov QWORD [num2], rax
          mov rax, QWORD [num1]
          add QWORD [num0], rax
          
          cmp QWORD [num0], 10
          jge decomp
          mov rdx, 1
          mov rcx, nums
        
          mov rbx, 1
          mov rax, 4
          int 0x80
    

          jmp loop_printtail
          
          
            decomp:
              mov r13, 0
              mov r11, [num0]
              
            decomp_head:
              cmp r11, 0
              je decomp_exit
              
              decomp_body:
                mov rdx, 0
                mov rcx, 0
                mov rbx, 10
                mov rax, r11
                div rbx

              decomp_tail:
                push rdx
                add r13, 1
                mov r11, rax

                jmp decomp_head

              decomp_exit:

                    rev_print_head:
                      cmp r13, 0
                      je rev_print_exit

                    rev_print_body:
                      mov rdx, 1
                      mov rcx, nums
                      pop r11
                      add rcx, r11
                      mov rbx, 1
                      mov rax, 4
                      int 0x80

                    rev_print_tail:
                      sub r13, 1
                      jmp rev_print_head

                    rev_print_exit:
                      mov rdx, nl_len
                      mov rcx, newline
                      mov rbx, 1
                      mov rax, 4
                      int 0x80
                      jmp loop_printtail

                    loop_printtail:
                    add QWORD [count], 1
                    jmp loop_head

                      loop_exit:
                      mov rax, 1
                      int 0x80    ; Exit the print loop program 


prime_check:
    cmp rdx, 1
    jle not_prime
    cmp rdi, 2
    je prime
    cmp rdi, 3
    je prime
    mov rbx, 2
sqrt_loop:
    mov rax, rbx
    imul rax, rbx
    cmp rax, rdi
    jge prime
    mov rax, rdi
    xor rdx, rdx
    div rbx
    cmp rdx, 0
    je not_prime
    inc rbx
    jmp sqrt_loop
prime:
    mov rax, 1
    ret
not_prime:
    mov rax, 0
    ret
